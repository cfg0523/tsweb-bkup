<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.techsen.tsweb.sys.dao.UserDao">
    <resultMap type="User" id="UserMap">
        <id property="id" column="user_id"/>
        <result property="username" column="user_name"/>
        <result property="password" column="user_password"/>
        <result property="createBy" column="user_create_by"/>
        <result property="createDate" column="user_create_date"/>
        <result property="updateBy" column="user_update_by"/>
        <result property="updateDate" column="user_update_date"/>
        <result property="remark" column="user_remark"/>
        
        <collection property="roles" column="user_id" ofType="Role" select="com.techsen.tsweb.sys.dao.UserRoleDao.getRolesByUserId"/>
    </resultMap>

    <sql id="UserTable">sys_user_mstr</sql>
    <sql id="UserRoleTable">sys_userrole_det</sql>
    <sql id="RoleTable">sys_role_mstr</sql>

    <sql id="UserColumns">
        user_id, user_name, user_password,
        user_create_by, user_create_date,
        user_update_by, user_update_date,
        user_remark
    </sql>

    <sql id="UserProperties">
        #{id}, #{username}, #{password},
        #{createBy}, #{createDate},
        #{updateBy}, #{updateDate},
        #{remark}
    </sql>
    
    <sql id="UserUpdateMap">
        user_name = #{username},
        user_password = #{password},
        <!-- user_create_by = #{createBy}, -->
        <!-- user_create_date = #{createDate}, -->
        user_update_by = #{updateBy},
        user_update_date = #{updateDate},
        user_remark = #{remark}
    </sql>

    <sql id="UserWhereCondition">
        <where>
            <choose>
                <when test="id != null">
                    user_id = #{id}
                </when>
                <when test="username != null">
                    user_name = #{username}
                </when>
                <otherwise>
                    1 == 0
                </otherwise>
            </choose>
        </where>
    </sql>

    <insert id="addEntity" parameterType="User">
        insert into <include refid="UserTable"/> (
            <include refid="UserColumns"/>
        ) values (
            <include refid="UserProperties"/>
        )
    </insert>

    <delete id="deleteEntity" parameterType="User">
        delete from <include refid="UserTable"/>
        <include refid="UserWhereCondition"/>
    </delete>

    <update id="updateEntity" parameterType="User">
        update <include refid="UserTable"/>
        set <include refid="UserUpdateMap"/>
        <include refid="UserWhereCondition"/>
    </update>

    <select id="getEntity" parameterType="User" resultMap="UserMap">
        select <include refid="UserColumns"/>
        from <include refid="UserTable"/>
        <include refid="UserWhereCondition"/>
    </select>

    <select id="getById" parameterType="String" resultMap="UserMap">
        select <include refid="UserColumns"/>
        from <include refid="UserTable"/>
        <where> user_id = #{id} </where>
    </select>

    <select id="getAllUsers" resultMap="UserMap">
        select <include refid="UserColumns"/>
        from <include refid="UserTable"/>
    </select>

</mapper>
